Within s-spec.rkt you'll see a couple examples of the structure of how the tests should be.  Also, you'll find all the code that makes up this test suite.  

Known bug(s) that I don't have the time to fix that I just found:

1) Things like let don't work within the it-exp bodies because of how the accessor it-exp->should-be works.  Since let would would have the should-be exp in the body of the let this isn't where the accessor usually thinks it is.  So if you were to put a let expression in the it-exp body like I just tried to do you would get an error.  


What's in each file? 

s-spec.rkt - All of the code for the s-spec

ll-interpreter10.rkt - Homework 10 which I tested upon in tester.rkt

tester.rkt - Contains a full test for the homework 10 that we did in class.  This should give a good idea of what testing with this test suite would feel like.  Try changing the expected values to get the failed tests information to pop up.  Or even create your own!

environment.rkt - contains our environment for homework 10


If I had the time more time this is what would be done: 

1) Fix the problem with bodies and lets or anything else that encapsulates something into its own body.  

2) Use Macros to help with the syntax of the program.  


What could have been done better with macros?

With macros I would have made the syntax of the program not less wordy, but with less parentheses.  Where a macro would have made the "parts" of the test suite easy, I had to use lists within lists within lists etc.  This made some of the syntax ugly.  When you would want to write just (proc body) you had to write '(((proc body))) instead so that I could parse through it.  This bad syntax may have been bad planning on my part with how I began to make my accessors etc.  Since I'm still uneasy with macros seeing their full potential is hard, so if you see anything that could be done with them to make it look more friendly please let me know.  I'd like to actually fix this up with them when I have the time after christmas.  


